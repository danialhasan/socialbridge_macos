// import auto-update functionality
// NOTE: auto-update doesn't work until app is notarized
require('update-electron-app')({
  logger: require('electron-log'),
});
import { app, BrowserWindow } from 'electron';
import {
  injectButton,
  injectButtonFunctionality,
  setLocalStorage,
  stringifyFunctions,
  wipeLocalStorage,
} from './buttonInjectionScripts';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// MAIN_WINDOW_WEBPACK_ENTRY is for loading index.html, unneeded if loading Notion instead.
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
// timeout for injected functions
const timeout = 4000;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const [
  strInjectionFn,
  strButtonFunctionalityFn,
  strSetLocalStorage,
  strWipeLocalStorage,
] = stringifyFunctions([
  injectButton,
  injectButtonFunctionality,
  setLocalStorage,
  wipeLocalStorage,
]);
const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    title: 'SocialBridge',
  });
  console.log('DIRNAME: ', __dirname);
  // and load Notion.
  mainWindow.loadURL('https://www.notion.so/964fc45d118b4c4c937462d101604201');

  // Open the DevTools.
  if (process.env.NODE_ENV !== 'production') {
    mainWindow.webContents.openDevTools();
  }
  mainWindow.webContents.on('dom-ready', () => {
    console.log('DOM ready');
  });
  mainWindow.on('close', (event) => {
    mainWindow.webContents.executeJavaScript(
      strWipeLocalStorage + 'wipeLocalStorage()'
    );
  });

  /**
   * The following code can only run once a user has signed into Notion.
   */
  mainWindow.webContents.on('did-finish-load', () => {
    // Only run the code below if the actionButtons element has loaded in
    // const executeScript0 = strSetLocalStorage + ' setLocalStorage()';
    // const executeScript1 = `
    // const script = document.createElement("script");
    // script.id = "SocialBridge_Script";
    // document.head.appendChild(script);
    // `;

    // const executeScript2 = `document.getElementById('SocialBridge_Script').innerHTML = "${strInjectionFn} ${strButtonFunctionalityFn} injectButton(); injectButtonFunctionality(); "`;
    // console.log('<-------------->');
    // console.log(executeScript0);
    // console.log('<-------------->');
    // console.log(executeScript2);
    setTimeout(() => {
      // mainWindow.webContents.executeJavaScript(executeScript0);
      mainWindow.webContents.executeJavaScript(
        `${strSetLocalStorage}${strInjectionFn}${strButtonFunctionalityFn}`
      );
      console.log('Logging all stringified functions:');
      [strSetLocalStorage, strInjectionFn, strButtonFunctionalityFn].forEach(
        (fn) => {
          // execute function to get it in webpage context, then call it
          mainWindow.webContents.executeJavaScript(fn);
          const regex = /function[\t ]+([a-zA-Z_$][a-zA-Z_$0-9]*)/;
          const functionName = fn.match(regex);
          console.log('functionName: ', functionName[1]);

          mainWindow.webContents.executeJavaScript(`${functionName[1]}()`);
        }
      );
    }, 4000);
    setTimeout(() => {
      // mainWindow.webContents.executeJavaScript(executeScript1);
      // mainWindow.webContents.executeJavaScript(executeScript2);
    }, 4000);
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
